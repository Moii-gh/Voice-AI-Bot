from telebot import TeleBot, types
import re
from keyboards import get_main_keyboard
from gpt import GPT
from audio_utils import download_file, convert_to_pcm16, progress_audio_file
from config import Tg_Key, max_message_size, max_message_duration

bot = TeleBot(Tg_Key)
user_texts = {}
gpt = GPT()

start_text = """
üó£Ô∏è–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Äì –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ–µ –∏ —Ç–æ—á–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞üìä –∏ –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑‚úçÔ∏è
‚Äì –ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ üîí 
‚Äì –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –∏ –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–æ–≤ üí¨
- –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µüß©\n\n–ñ–¥–µ–º –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""

@bot.message_handler(["start"])
def start(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, f"{start_text}\n\n")


@bot.message_handler(content_types=["voice"])
def echo_voice(message):
    data = message.voice
    if(data.file_size > max_message_size) or (data.duration > max_message_duration):
        reply = "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ"
        bot.reply_to(message, reply)
        return
    file_url = f"https://api.telegram.org/file/bot{bot.token}/{bot.get_file(data.file_id).file_path}"
    file_path = download_file(file_url)
    convert_to_pcm16(file_path)
    text = progress_audio_file("new.wav")
    
    if text:
        reply_text = f"{text}\n\n–°–æ–∑–¥–∞–Ω–æ –±–æ—Ç–æ–º <a href='https://t.me/VoiceMessage_AI_Bot'>Voice Message - AI</a>"
        user_texts[message.chat.id] = text
    else:
        reply_text = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç."
    bot.reply_to(message, reply_text, reply_markup=get_main_keyboard(), parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    chat_id = call.message.chat.id
    text = user_texts.get(chat_id, "")
    options = {
        'model': 'gpt-4',
        'markdown': False,
    }

    if text:
        if call.data == "brief_retelling":
            bot.answer_callback_query(call.id, "–ò–¥–µ—Ç –ø–µ—Ä–µ—Å–∫–∞–∑...")
            messages = [
                {
                    'role': 'user',
                    'content': "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏ –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: " + text
                }
            ]
            response = gpt.fetch_data(messages, options)
            bot.send_message(chat_id, response)

        elif call.data == "improved_text":
            messages = [
                {
                    'role': 'user',
                    'content': "–£–ª—É—á—à–∏ –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: " + text
                }
            ]
            response = gpt.fetch_data(messages, options)
            bot.send_message(chat_id, response)
        elif call.data == "timecodes":
            bot.answer_callback_query(call.id, "–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

        elif call.data == "to_answer":
             messages = [
                {
                    'role': 'user',
                    'content': "–û—Ç–≤–µ—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç 3 —Ä–∞–∑–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ : " + text
                }
            ]
             response = gpt.fetch_data(messages, options)
             bot.send_message(chat_id, response)
        elif call.data == "lang":
            bot.send_message(chat_id, "–ü–æ–∫–∞ —è –≥–æ–≤–æ—Ä—é —Ç–æ–ª—å–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–Ω–µ —è–∑—ã–∫–∞—Ö, –Ω–æ –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ, —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Å–≤–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –∏ –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ –≤–∞—à–µ–º —è–∑—ã–∫–µ <b>–ø–æ–ø–æ–∑–∂–µ</b>.", parse_mode="HTML")
    
    else:
        bot.send_message(chat_id, "–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ—Å–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

if __name__ == "__main__":
    bot.delete_webhook()
    bot.polling()
